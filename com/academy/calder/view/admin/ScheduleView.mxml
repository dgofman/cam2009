<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" width="1125" height="656" layout="horizontal"
	horizontalScrollPolicy="off" verticalScrollPolicy="off" showCloseButton="true" close="closeWindow()"
	paddingBottom="2" paddingTop="2" paddingLeft="2" paddingRight="2" preinitialize="init()" styleName="schedulePanel">
	<mx:Style>
		.schedulePanel {
		   borderColor: #000099;
		   borderAlpha: 1;
		   titleStyleName: "schedulePanelTitle";
		}
		
		.schedulePanelTitle {
		   color: #ffffff;
		   fontWeight:bold;
		}
		
        .scheduleBorder{
            borderColor:#999999;
            borderStyle:solid;
        }
        
        .scheduleBoxHeader{
        	horizontalAlign:right;
        	paddingRight:2;
        	fontWeight:bold;
        	backgroundColor:#FF6699;
        	borderColor:#999999;
            borderStyle:solid;
            borderSides:bottom;
        }
    </mx:Style>
	<mx:Script>
		<![CDATA[
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.collections.ArrayCollection;
			import mx.managers.PopUpManager;
			import com.academy.calder.business.Manager;
			import flash.utils.getDefinitionByName;
			
			[Bindable]
			private var calendarData:ArrayCollection;
			
			private var scheduleData:Object  = {};
			private var recursiveData:Object = {};
			private var exceptionData:Object = {};
			private var scheduleRefData:Object = {};
			
			private var resultData:Object;
			private var lastCreateDate:Date;
			private var createDateInterval:Number;
			private var dateGrid:*;
			
			private static var _window:ScheduleView;
			
			public static function openWindow(result:Object):ScheduleView{
				if(_window == null)
               		_window = PopUpManager.createPopUp(Manager.application as DisplayObject, ScheduleView, true) as ScheduleView;
    			_window.resultData = result;
    			PopUpManager.centerPopUp(_window);
			    return _window;
			}
			
			public static function closeWindow():void{
				if(_window)
					PopUpManager.removePopUp(_window);
				_window = null;
			}
			
			private function init():void{
				var calendarLayout:Class = getDefinitionByName("mx.controls::CalendarLayout") as Class;
				dateGrid = new calendarLayout();
			}
			
			private function set displayedMonthAndYear(value:int):void{
				var day:Number = NaN;
				var displayedYear:int = dateChooser.displayedYear;				
				var displayedMonth:int = dateChooser.displayedMonth;
				var monthName:String = dateChooser.monthNames[displayedMonth];
				var offset:int = dateGrid.mx_internal::getOffsetOfMonth(displayedYear, displayedMonth);
        		var daysInMonth:int = dateGrid.mx_internal::getNumberOfDaysInMonth(displayedYear, displayedMonth);
        		var date:Date = new Date(displayedYear, displayedMonth);
				calendarData = null;
				
				if(details) details.dataProvider = null;
				if(cancel_lst) cancel_lst.dataProvider = null;
					
				if(lastCreateDate == null || lastCreateDate.time != date.time){	
					function createGrid():void{
						clearInterval(createDateInterval);						
						scheduleData = {};
						recursiveData = {};
						exceptionData = {};
						scheduleRefData = {};
						
						if(resultData is Array){
							for(var i:uint = 0; i < resultData.length; i++){
								var record:Object = resultData[i];
								scheduleRefData[record.scheduleId] = record;
								if(record.endDate == null){
									for(var w:uint = 0; w < record.smtwtfs.length; w++){
										if(record.smtwtfs.charAt(w) == "1"){
											if(recursiveData[w] == null)
												recursiveData[w] = [];
											recursiveData[w].push(record);
										}
									}
								}else{
									var ymd:Array = record.startDate.split('-');
									if(ymd[0] == displayedYear && ymd[1] == displayedMonth + 1){
										var d:String = ymd[2];
										if(exceptionData[d] == null)
											exceptionData[d] = [];
										exceptionData[d].push(record);
									}	
								}
							}
						}
						
						var rows:ArrayCollection = new ArrayCollection();
						for(var r:uint = 0; r < 6; r++){
							var cols:ArrayCollection = new ArrayCollection();
							for(var c:uint = 0; c < 7; c++){
								if(isNaN(day)){
									if(c == offset)
										day = 1;
								}else{
									day++;
								}
								
								if(!isNaN(day)){
									var $exceptions:Array = exceptionData[day];
									var $recursives:Array = recursiveData[c];
									if($recursives != null && $exceptions == null){
										scheduleData[day] = $recursives;
									}else if($exceptions != null){
										var $data:Array = [];
										
										if($recursives != null){
											for(var i1:uint = 0; i1 < $recursives.length; i1++){
												var $r:Object = $recursives[i1];
												var add:Boolean = true;
												for(var i2:uint = 0; i2 < $exceptions.length; i2++){
													var $e:Object = $exceptions[i2];
													if($r.startTime == $e.startTime && $e.disposition == "canceled"){
														add = false;
														break;
													}
												}
												if(add == true)
													$data.push($r);
											}
										}
										
										for(var i3:uint = 0; i3 < $exceptions.length; i3++){
											$e = $exceptions[i3];
											if($e.refScheduleId != null)
												$e.refSchedule = scheduleRefData[$e.refScheduleId];
											if($e.disposition != "canceled")
												$data.push($e);
										}
										var listData:ArrayCollection = new ArrayCollection($data);
										var sort:Sort = new Sort();
				                        sort.fields = [new SortField("startTime")]; 
				                        listData.sort = sort;
				                        listData.refresh();
										scheduleData[day] = listData.toArray();
									}
								}
								cols.addItem(day);
								if(day >= daysInMonth){
									r = 6;
									break;
								}
							}
							rows.addItem(cols);
						}
						calendarData = rows;
					};				
					title = monthName + dateChooser.monthSymbol + " - " + displayedYear + dateChooser.yearSymbol;
					lastCreateDate = date;
					
					clearInterval(createDateInterval);
					createDateInterval = setInterval(createGrid, 300);
				}
			}
			
			//Repeater functions
			private function $v(item:Object, prop:String):*{
				return item[prop];
			}
			
			public function selectDate(startDate:String):void{
				var d:Array = startDate.split('-');
				dateChooser.selectedDate = new Date(d[0], d[1] - 1, d[2]);
				if( dateChooser.displayedYear == dateChooser.selectedDate.fullYear &&
					dateChooser.displayedMonth == dateChooser.selectedDate.month){
					dateChooser.dispatchEvent(new Event(Event.CHANGE));
				}else{
					dateChooser.displayedYear = dateChooser.selectedDate.fullYear;
					dateChooser.displayedMonth = dateChooser.selectedDate.month;
				}
			}
		]]>
	</mx:Script>
	<mx:Binding source="dateChooser.displayedMonth" destination="displayedMonthAndYear"/>
	<mx:Binding source="dateChooser.displayedYear" destination="displayedMonthAndYear"/>
	
	<mx:Canvas width="100%" id="canvas">
		<mx:VBox width="{canvas.width}" height="{canvas.height}" verticalAlign="middle" horizontalAlign="center">
			<mx:Label text="{Manager.bundle.getMessage('pleaseWait')}" fontWeight="bold"/>
		</mx:VBox>
		
		<mx:Grid width="100%" borderSides="left top right" styleName="scheduleBorder" verticalGap="1" horizontalGap="1" backgroundColor="#F2F2F2">
			<mx:Repeater id="rows" dataProvider="{calendarData}">
				<mx:GridRow width="100%" borderSides="bottom" styleName="scheduleBorder">
					<mx:Repeater id="cols" dataProvider="{rows.currentItem}">
						<mx:GridItem width="14.26%" borderSides="right" styleName="{cols.currentIndex == 6 ? null : 'scheduleBorder'}">
							<mx:VBox width="100%" height="100" verticalGap="0" visible="{!isNaN(cols.currentItem)}" backgroundColor="#ffffff">
								<mx:Script>
									<![CDATA[
										import mx.containers.VBox;
										
										private function onComplete(event:Event):void{
											var selectionColor:Number = dateChooser.getStyle('selectionColor');
											var vbox:VBox = event.currentTarget.parent as VBox;	
											event.target.dataProvider = scheduleData[event.target.data];

											function selectedDateChanged(e:Event):void{
												vbox.setStyle("backgroundColor", 
													event.currentTarget.data == dateChooser.selectedDate.date ? selectionColor : 0xffffff);
												
												if(event.currentTarget.data == dateChooser.selectedDate.date){
													cancel_lst.dataProvider = [];
													details.dataProvider = event.currentTarget.dataProvider;
													
													var $exceptions:Array = exceptionData[event.currentTarget.data];
													if($exceptions != null){
														for(var i:uint = 0; i < $exceptions.length; i++){
															var $e1:Object = $exceptions[i];
															if($e1.disposition == "canceled"){
																for each(var $e2:Object in scheduleRefData){
																	if($e2.refScheduleId == $e1.scheduleId){
																		cancel_lst.dataProvider.addItem(
																			{label:$e1.startTime + " -> " + $e2.startDate + " " + $e2.startTime, startDate:$e2.startDate});
																		break;
																	}
																}
															}
														}
													}
												}
											};
											dateChooser.addEventListener(Event.CHANGE, selectedDateChanged);
											if(dateChooser.selectedDate != null)
												dateChooser.dispatchEvent(new Event(Event.CHANGE));
										}
										
										private function onClick(event:Event):void{
											dateChooser.selectedDate = 
												new Date(dateChooser.displayedYear, dateChooser.displayedMonth, event.currentTarget.data);
											dateChooser.dispatchEvent(new Event(Event.CHANGE));
										}
										
										private function labelFunctionHandler(item:Object):String{
											return item.startTime + " " + (item.disposition != "lesson taken" ? item.disposition : "");
										}
									]]>
								</mx:Script>
								<mx:HBox width="100%" styleName="scheduleBoxHeader">
									<mx:Label text="{isNaN(cols.currentItem) ? null : cols.currentItem}"/>						
								</mx:HBox>
								<mx:List width="100%" height="100%" creationComplete="onComplete(event)"
										data="{cols.currentItem}" click="onClick(event)" labelFunction="labelFunctionHandler"
										itemRenderer="mx.controls.Label" backgroundAlpha="0" borderStyle="none" 
										rollOverColor="#ffffffff" selectionColor="#ffffffff"
										dropEnabled="true" dragMoveEnabled="true" dragEnabled="true"/>
							</mx:VBox>
						</mx:GridItem>
					</mx:Repeater>
				</mx:GridRow>
			</mx:Repeater>
		</mx:Grid>
	</mx:Canvas>
	<mx:VBox height="100%" horizontalAlign="right">
		<mx:DateChooser id="dateChooser" scroll="dateChooser.selectedDate=null"/>
		<mx:Canvas id="cvs" width="{dateChooser.width}" height="100%" horizontalScrollPolicy="off" borderStyle="solid">
			<mx:Form width="100%" height="100%" verticalGap="0" paddingLeft="0" paddingRight="0">
				<mx:Repeater id="details">
					<mx:FormItem label="{Manager.bundle.getMessage('startTime')}:" fontWeight="bold">
						<mx:Label text="{$v(details.currentItem, 'startTime')}" width="85"/>
					</mx:FormItem>
					<mx:FormItem toolTip="{$v($v(details.currentItem, 'refSchedule'), 'disposition')}" 
							textDecoration="underline" color="blue" useHandCursor="true" buttonMode="true" mouseChildren="false"
							visible="{$v(details.currentItem, 'refSchedule') != null}" includeInLayout="{$v(details.currentItem, 'refSchedule') != null}"
							label="{$v($v(details.currentItem, 'refSchedule'), 'startDate')}" click="selectDate(event.target.label)">
						<mx:Label text="{$v($v(details.currentItem, 'refSchedule'), 'startTime')}" width="85"/>
					</mx:FormItem>
					<mx:FormItem label="{Manager.bundle.getMessage('disposition')}:">
						<mx:Label  text="{$v(details.currentItem, 'disposition')}" 
								toolTip="{$v(details.currentItem, 'disposition')}" width="85"/>
					</mx:FormItem>
					<mx:FormItem label="{Manager.bundle.getMessage('startDate')}:">
						<mx:Label text="{$v(details.currentItem, 'startDate')}" width="85"/>
					</mx:FormItem>
					<mx:FormItem label="{Manager.bundle.getMessage('endDate')}:">
						<mx:Label text="{$v(details.currentItem, 'endDate')}" width="85"/>
					</mx:FormItem>
					<mx:FormItem label="{Manager.bundle.getMessage('options')}:">
						<mx:Label text="{$v(details.currentItem, 'options')}" width="85"/>
					</mx:FormItem>
					<mx:FormItem label="{Manager.bundle.getMessage('note')}:">
						<mx:Text text="{$v(details.currentItem, 'notes')}" width="85"/>
						<mx:Spacer height="25"/>
					</mx:FormItem>
				</mx:Repeater>
			</mx:Form>
		</mx:Canvas>
		<mx:List id="cancel_lst" width="{dateChooser.width}" color="red" textDecoration="underline" height="30">
			<mx:itemRenderer>
				<mx:Component>
					<mx:Label useHandCursor="true" buttonMode="true" mouseChildren="false" 
						click="ScheduleView(document).selectDate(data.startDate)"/>
				</mx:Component>
			</mx:itemRenderer>
		</mx:List>
		<mx:Button label="{Manager.bundle.getMessage('close')}" click="closeWindow()"/>
	</mx:VBox>
</mx:TitleWindow>