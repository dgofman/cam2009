<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:view="com.academy.calder.view.*" 
	show="onShow()"
	width="100%" 
	height="100%">
	<mx:DateFormatter id="dateFormat" formatString="YYYY-MM-DD" />
	<mx:Script>
		<![CDATA[
			import mx.rpc.events.ResultEvent;
			import mx.rpc.events.FaultEvent;
			import com.academy.calder.business.Manager;
			import com.academy.calder.business.Services;
			
			private var lessonControls:Array;
			private var selectedMonthNode:Object;
			private var lessonDisposition:Array = [ {label:"lesson taken", data:1},
													{label:"missed, but still charged", data:2},
													{label:"missed by student, not charged", data:3},
													{label:"missed by teacher, not charged", data:4}];
			
			private function onShow():void{
				scheduleTree.dataProvider = [];
				/*if(Manager.selectedUserId != undefined){
					new Services(this, "onResultLessonControl").getLessonTypeIds(Manager.selectedUserId);
				}*/
			}
			
			private function onResultLessonControl(event:ResultEvent):void{
				/*if(!Services.isError(event)){
					lessonControls = event.result.items;
					if(lessonControls.length == 0){
						return;
					}
					var lessontypesObject:Object = Manager.getAdminStudentPanel().lessontypesObject;
					var usedTypeIds:Object = {};
					var data:Array = [];
					for(var i:Number = 0; i < lessonControls.length; i++){
						var item:Object = lessonControls[i];
						if(usedTypeIds[item.lessonTypeId] == undefined){
							usedTypeIds[item.lessonTypeId] = true;
							data.push({label:lessontypesObject[item.lessonTypeId], data:item.lessonTypeId});
						}
					}
					selectedMonthNode = undefined;
					scheduleTree.selectedIndex = undefined;
					lessonTypeId.dataProvider = data;
					lessonTypeId.dispatchEvent({type:"change"});
					updateTreeData();
				}*/
			}
			
			private function updateTreeData():void{
				/*if(Manager.selectedUserId != undefined){
					new Services(this, "onResultTuition").getTuitionCountByYearAndId(Manager.selectedUserId, year_spr.value);
				}*/
			}
			
			private function onResultTuition(event:ResultEvent):void{
				/*if(!Services.isError(event)){
					var data:Array = [];
					var months:Object = event.result;
					for(var i:Number = 0; i < 12; i++){
						data[i] = {label:Manager.MONTHS[i], monthName:Manager.MONTHS[i], monthIndex:i, init:true};
						if(months[i] != '0'){
							data[i].children = [{label:"Loading..."}];
						}
					}
					scheduleTree.dataProvider = data;
				}*/
			}
			
			private function onNodeOpenChange(node:Object):void{
				/*var depth:Boolean = scheduleTree.getNodeDepth(node);
				addButton.enabled = (node && depth == 1);
				if(node && depth == 2){
					enabledFields(true);
					selectedMonthNode = node.getParent();
					var data:Object = node.backingObject.data;
					if(data.item.notes != undefined)
						notes.text = data.item.notes;
					length.value = data.item.length;
					date.selectedDate = data.date;
					startTime.text = data.item.startTime;
					disposition.selectedIndex = Manager.getNumber(data.item.disposition - 1, 0);
					rate.value = data.item.rate;
					options.selectedIndex = (data.item.options - 1);
					rate.enabled = (options.selectedIndex == 2);
					modelChangedLessonType();
				}else{
					enabledFields(false);
					startTime.text = date.text = notes.text = "";
					if(node && depth == 1){
						selectedMonthNode = node;
						if(node.backingObject.init == true){
							node.backingObject.init = false;
							new Services(this, "onResultHistory").getHistoryByMonthYearAndId(Manager.selectedUserId, year_spr.value, node.backingObject.monthIndex + 1);
						}
						scheduleTree.setIsOpen(node, true);
						scheduleTree.selectedNode = node;
					}
				}*/
			}
			
			private function enabledFields(b):void{
				/*deleteButton.enabled = lessonTypeId.enabled = employeeUserId.enabled = length.enabled = disposition.enabled =
								rate.enabled = startTime.enabled = date.enabled = options.enabled = notes.enabled = b;*/
			}
			
			private function modelChangedLessonType():void{
				/*var node:Object = scheduleTree.selectedNode;
				var b:Boolean = scheduleTree.getIsBranch(node);
				if(node != undefined && b == false){
					if(node.backingObject.data.item.lessonTypeId == lessonTypeId.selectedItem.data){
						modelChangedEmployee();
					}else{
						for (var i : Number = 0; i < lessonTypeId.dataProvider.length; i++) {
							var lessonType:Object =  lessonTypeId.dataProvider[i];
							if (lessonType.data == node.backingObject.data.item.lessonTypeId) {
								lessonTypeId.selectedItem = lessonType;
								break;
							}
						}
						lessonTypeId.dispatchEvent({type:"change"});
					}
				}*/
			}
			
			private function modelChangedEmployee():void{
				/*var node:Object = scheduleTree.selectedNode;
				var b:Boolean = scheduleTree.getIsBranch(node);
				if(node != undefined && b == false){
					for (var i : Number = 0; i < employeeUserId.dataProvider.length; i++) {
						var employee:Object =  employeeUserId.dataProvider[i];
						if (employee.employeeUserId == node.backingObject.data.item.employeeUserId) {
							employeeUserId.selectedItem = employee;
							break;
						}
					}
				}
				employeeUserId.dispatchEvent({type:"change"});*/
			}
			
			private function onResultHistory(event:ResultEvent):void{
				/*if(!Services.isError(event)){
					if(event.result.items.length == 0){
						new Services(this, "onResultSchedule").getScheduleByMonthYearAndId(Manager.selectedUserId, year_spr.value, selectedMonthNode.backingObject.monthIndex + 1);
						return;
					}
					selectedMonthNode.removeTreeNodeAt(0);
					for(var i:Number = 0; i < event.result.items.length; i++){
						var item:Object = event.result.items[i];
						var ymd:Array = item.date.split('-');
						var node:Object = addNode(new Date(ymd[0], ymd[1] - 1, ymd[2]), item);
						node.backingObject.modified = false;
					}
					selectedMonthNode._childNodes.sort(dateSort);
					scheduleTree.modelChanged({eventName:"updateTree"});
					showTotalChildren(false);
				}*/
			}
			
			private function onResultSchedule(event:ResultEvent):void{
				/*if(!Services.isError(event)){
					var year:Number = year_spr.value;
					var month:Number = selectedMonthNode.backingObject.monthIndex;
					var bdate:Date = new Date(year, month, 1);
					var edate:Date = new Date(year, month, Manager.getMonthDays(year)[month]);
					var day:Number = 24 * 60 * 60 * 1000;
					selectedMonthNode.removeTreeNodeAt(0);
					for(var i:Number = 0; i < event.result.items.length; i++){
						var item:Object = event.result.items[i];
						var startDate:Date = bdate;
						var endDate:Date = edate;
						var ymd1:Array = item.startDate.split('-');
						var ymd2:Array = item.endDate.split('-');
						if(ymd1.length == 3){
							startDate = new Date(ymd1[0], ymd1[1] - 1, ymd1[2]);
						}
						if(ymd2.length == 3){
							endDate = new Date(ymd2[0], ymd2[1] - 1, ymd2[2]);
						}
						item.disposition = 1;
						for(var d:Number = Math.max(bdate.getTime(), startDate.getTime()); d <= edate.getTime() && d <= endDate.getTime(); d += day){
							var date:Date = new Date(d);
							if(item.smtwtfs.charAt(date.getDay()) == '1'){
								var node:Object = addNode(date, item);
								node.backingObject.modified = true;
							}
						}
					}
					selectedMonthNode._childNodes.sort(dateSort);
					scheduleTree.modelChanged({eventName:"updateTree"});
					showTotalChildren(true);
					saveButton.enabled = true;
				}*/
			}
			
			private function showTotalChildren(modified:Boolean):void{
				selectedMonthNode.backingObject.modified = modified;
				selectedMonthNode.backingObject.label = selectedMonthNode.backingObject.monthName + ", (" + selectedMonthNode._childNodes.length + ((!modified) ? ')' : ') *');
			}
			
			private function addNode(date:Date, item:Object):Object{
				var node:Object = selectedMonthNode.addTreeNodeAt(0, "");
				updateSelectedNode(node, date, item);
				return node;
			}
			
			private function updateSelectedNode(node:Object, date:Date, item:Object):void{
				/*var lessontypesObject:Object = Manager.getAdminStudentPanel().lessontypesObject;
				var time:Array = item.startTime.split(':');
				if(time.length == 3) date.setHours(time[0], time[1]); //SORT BY DATE AND TIME
				var employeeName:String = "";
				for(var l:Number = 0; l < lessonControls.length; l++){
					var lc:Object = lessonControls[l];
					if(item.employeeUserId == lc.employeeUserId){
						employeeName = ' - ' + lc.name;
						break;
					}
				}
				if(employeeName == ""){
					for(var l:Number = 0; l < employeeUserId.dataProvider.length; l++){
						var emp:Object = employeeUserId.dataProvider[l];
						if(item.employeeUserId == emp.employeeUserId){
							employeeName = ' - ' + emp.name;
							break;
						}
					}
				}
				node.backingObject.label = Manager.SHORT_DAYS[date.getDay()] + " " + getDateFormat(date) + " " + 
										item.startTime + ", " + lessontypesObject[item.lessonTypeId] + employeeName;
				node.backingObject.data = {date:date, item:item};*/
			}
			
			private function getDateFormat(date:Date):String{
				return (date.getMonth() + 1) + "/" + date.getDate() + "/" + date.getFullYear();
			}
			
			private function dateSort(a:Object, b:Object):Number{
				if(a.backingObject.data.date < b.backingObject.data.date){
					return -1;
				}else if (a.backingObject.data.date > b.backingObject.data.date){
					return 1;
				}else {
					return 0;
				}
			}
			
			private function formatDate(date:Date):String{
				return dateFormat.format(date);
			}
			
			private function changeLessonType():void{
				//new Services(this, "onResultEmployee").getEmployeeByLessonTypeId(lessonTypeId.selectedItem.data);
			}
			
			private function onResultEmployee(event:ResultEvent):void{
				/*if(!Services.isError(event)){
					employeeUserId.dataProvider = event.result.items;
				}*/
			}
			
			private function onFieldChange(event:Object, value:Object):void{
				/*if(event.target.enabled){
					var item:Object = scheduleTree.selectedNode.backingObject.data.item;
					if(item[event.target.id] != value){
						showTotalChildren(true);
						scheduleTree.selectedNode.backingObject.modified = true;
						saveButton.enabled = true;
					}
					item[event.target.id] = value;
					updateSelectedNode(scheduleTree.selectedNode, date.selectedDate, item);
					scheduleTree.modelChanged({eventName:"updateTree"});
				}*/
			}
			
			private function onChangeText(event:Object):void{
				onFieldChange(event, event.target.text);
			}
			
			private function onChangeStepper(event:Object):void{
				onFieldChange(event, event.target.value);
			}
			
			private function onChangeCombo(event:Object):void{
				onFieldChange(event, event.target.selectedItem.data);
			}
			
			private function onChangeEmployee(event:Object):void{
				onFieldChange(event, event.target.selectedItem.employeeUserId);
			}
			
			private function onAddEvent():void{
				var year:Number = year_spr.value;
				var month:Number = selectedMonthNode.backingObject.monthIndex;
				var date:Date = new Date(year, month, 1);
				var item2:Object = lessonControls[0];
				var item:Object = {
					employeeUserId:item2.employeeUserId,
					lessonTypeId:item2.lessonTypeId,
					length:0,
					rate:0,
					options:1,
					startTime:'08:00:00'
				};
				item.disposition = 1;
				/*var node:Object = addNode(date, item);
				node.backingObject.modified = true;
				scheduleTree.setIsOpen(selectedMonthNode, true);
				scheduleTree.selectedNode = node;
				scheduleTree.dispatchEvent({type:"change"});
				showTotalChildren(true);
				saveButton.enabled = true;*/
			}
			
			private function onDeleteEvent():void{
				/*var index:Number = scheduleTree.selectedIndex;
				scheduleTree.selectedNode.removeTreeNode();
				scheduleTree.selectedIndex = index-1;
				scheduleTree.dispatchEvent({type:"change"});
				showTotalChildren(true);
				saveButton.enabled = true;*/
			}
			
			private function onSave():void{
				/*var data:Array = [];
				for(var i:Number = 0; i < scheduleTree.dataProvider._childNodes.length; i++){
					var node:Object = scheduleTree.dataProvider._childNodes[i];
					if(node.backingObject.modified){
						for(var n:Number = 0; n < node._childNodes.length; n++){
							var index:Number = scheduleTree.getDisplayIndex(node._childNodes[n]);
							var nodeObject:Object = node._childNodes[n].backingObject;
							if(nodeObject.modified){
								var lesson_date:String = formatDate(nodeObject.data.date);
								with(nodeObject.data.item){
									data.push({ index:index,
												date:lesson_date,
												lessonHistoryId:lessonHistoryId,
												employeeUserId:employeeUserId,
												lessonTypeId:lessonTypeId,
												startTime:startTime,
												length:length,
												rate:rate,
												options:options,
												disposition:disposition,
												notes:notes });
								}
							}
						}
					}
				}
				if(data.length > 0){
					new Services(this, "onResultSave").saveLessonHistory(Manager.selectedUserId, data); 
				}*/
			}
			
			private function onResultSave(event:ResultEvent):void{
				/*if(!Services.isError(event)){
					addButton.enabled = false;
					deleteButton.enabled = false;
					saveButton.enabled = false;
					for(var id:String in event.result){
						var index:Number = Number(id.substring(1));
						var success:Boolean = event.result[id];
						scheduleTree.setPropertiesAt(index, {backgroundColor:((success) ? 0xFFFFFF : 0xFEAFBD)});
						if(success){
							var node:Object = scheduleTree.getNodeDisplayedAt(index);
							node.backingObject.modified = false;
						}
					}
					for(var i:Number = 0; i < scheduleTree.dataProvider._childNodes.length; i++){
						checkChildNodes(scheduleTree.dataProvider._childNodes[i]);
					}
					scheduleTree.selectedIndex = undefined;
					selectedMonthNode = undefined;
					scheduleTree.modelChanged({eventName:"updateTree"});
				}*/
			}
			
			private function checkChildNodes(node:Object):void{
				if(node.backingObject.modified){
					for(var n:Number = 0; n < node._childNodes.length; n++){
						if(node._childNodes[n].backingObject.modified){
							saveButton.enabled = true;
							return;
						}
					}
					selectedMonthNode = node;
					showTotalChildren(false);
				}
			}
			
			private function onFault(fault:FaultEvent):void{
				Manager.error("Can not load lessons schedule data.", "Load Error");
			}
		]]>
	</mx:Script>
	<mx:HBox width="100%" horizontalAlign="right">
		<mx:Button label="Add" id="addButton" icon="@Embed('/resources/images/add.jpg')" height="20" enabled="false" click="onAddEvent()"/>
		<mx:Button label="Delete" id="deleteButton" icon="@Embed('/resources/images/delete.jpg')" height="20" enabled="false" click="onDeleteEvent()"/>
		<mx:Button label="Save" id="saveButton" icon="@Embed('/resources/images/save.jpg')" height="20" click="onSave()" enabled="false"/>
	</mx:HBox>
	<mx:HDividedBox width="100%" height="100%" paddingLeft="10">
		<mx:VBox width="100%" height="100%">
			<mx:HBox width="100%">
				<mx:Label text="Select year:" fontWeight="bold"/>
				<mx:NumericStepper id="year_spr" width="100" minimum="2000" maximum="2300" toolTip="Choose year." 
						value="{new Date().getFullYear()}" change="updateTreeData()"/>
			</mx:HBox>
			<mx:Tree id="scheduleTree" width="100%" height="100%" itemOpen="onNodeOpenChange(event)" change="onNodeOpenChange(event.target.selectedNode)"/>
		</mx:VBox>
		<mx:VBox width="350" height="100%" paddingTop="10" verticalGap="0">
			<mx:Label text="Manage selected node" fontWeight="bold" width="100%" textAlign="center"/>
			<mx:Form width="100%" height="100%" borderStyle="solid">
				<mx:FormItem label="Lesson Type:" width="100%">
					<mx:ComboBox id="lessonTypeId" toolTip="Lesson type list." width="100%" enabled="false" 
						data="modelChangedLessonType()" change="onChangeCombo(event);changeLessonType()"/>
				</mx:FormItem>
				<mx:FormItem label="Employee:" width="100%">
					<mx:ComboBox width="100%" id="employeeUserId" toolTip="Employee list." enabled="false" labelField="name"
						data="modelChangedEmployee()" change="onChangeEmployee(event)"/>
				</mx:FormItem>
				<mx:FormItem label="Disposition:" width="100%">
					<mx:ComboBox id="disposition" width="100%" enabled="false" dataProvider="{lessonDisposition}" change="onChangeCombo(event)"/>
				</mx:FormItem>
				<mx:FormItem label="Option:" width="100%">
					<!--mx:ComboBox id="options" width="100%" enabled="false" change="onChangeCombo(event);rate.enabled=(event.target.selectedIndex==2)" 
						dataProvider="{Manager.TUITION_OPTIONS}"/-->
				</mx:FormItem>
				<mx:FormItem label="Student Rate:" width="100%">
					<mx:NumericStepper id="rate" width="100%" minimum="0" maximum="100000"
						toolTip="Lesson cost." enabled="false" value="0" change="onChangeStepper(event)"/>
				</mx:FormItem>
				<mx:FormItem label="Length:" width="100%">
					<mx:NumericStepper id="length" width="100%" minimum="0" maximum="1440" stepSize="15" enabled="false"
							toolTip="Enter lesson length." change="onChangeStepper(event)"/>
				</mx:FormItem>
				<mx:FormItem label="Start Time:" width="100%">
					<mx:TextInput width="100%" id="startTime" enabled="false"
						toolTip="Enter start time" change="onChangeText(event)"/>
				</mx:FormItem>
				<mx:FormItem label="Date:" width="100%">
						<mx:DateField id="date" labelFunction="formatDate" width="100%" enabled="false" change="onFieldChange(event, event.target.selectedDate)"/>
				</mx:FormItem>
				<mx:FormItem label="Notes:" width="100%">
						<mx:TextArea id="notes" width="100%" height="80" enabled="false" change="onChangeText(event)"/>
				</mx:FormItem>
			</mx:Form>
		</mx:VBox>
	</mx:HDividedBox>
</mx:VBox>