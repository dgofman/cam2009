<?xml version="1.0" encoding="utf-8"?>
<mx:HDividedBox xmlns:mx="http://www.adobe.com/2006/mxml"
				xmlns:home="com.academy.calder.view.admin.home.*"
				xmlns:links="com.academy.calder.view.admin.links.*"
				width="100%" height="100%" horizontalGap="6" activate="onRefresh()"
				implements="com.academy.calder.view.admin.links.IMessageAction">
	<mx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.events.CollectionEvent;
			import com.academy.calder.vo.PersonVO;
			import com.academy.calder.vo.MessageVO;
			import com.academy.calder.business.Manager;
			import com.academy.calder.business.AMFService;
			import com.academy.calder.enum.MessageStatusEnum;
			import com.academy.calder.helper.AdminViewHelper;
			
			private const model:AdminViewHelper = AdminViewHelper.getSelf();

			[Bindable]
			private var _reporter:PersonVO;
			
			[Bindable]
			private var _message:MessageVO;
			
			private var _cachedUsers:Object = {};

			public function onRefresh():void{
				_message = null
				_reporter = null;
				AMFService.send('Admin.notice', null, onNoticeResult, onFault);
			}

			public function onDelete():void{
				_message = null;
				_reporter = null;
				if(dataGrid.dataProvider != null){
					var ids:Array = [];
					for(var i:uint = 0; i < dataGrid.dataProvider.length; i++){
						var data:Object = dataGrid.dataProvider[i];
						if(data.flag == true)
							ids.push(data.messageId);
					}
					if(ids.length)
						AMFService.send('Admin.deleteMessage', ids, onMessageDeleteResult, onFault);
				}
			}
			
			public function onCreate():void{
				createViewStack.selectedIndex = 1;
				dataGrid.selectedIndex = -1;
				_reporter = null;
				messageView.message = _message = new MessageVO();
			}
			
			public function onEdit():void{
				createViewStack.selectedIndex = 1;
				messageView.message = _message;
			}
			
			private function onSubmit():void{
				AMFService.send('Admin.createMessage', ['notice', messageView.priority.selectedItem.value,
																  messageView.subject.text,
																  messageView.body.text,
																  messageView.message.messageId], onSubmitMessageResult, onFault);
			}
			
			private function onCancel():void{
				createViewStack.selectedIndex = 0;
			}
			
			private function onSubmitMessageResult(result:Object):void{
				if(result != null){
					if(messageView.message.messageId != null){
						dataGrid.dataProvider.setItemAt(result, dataGrid.selectedIndex);
					}else{
						dataGrid.dataProvider.addItemAt(result, 0);
						dataGrid.selectedIndex = 0;
					}
					_message = new MessageVO(result);
					createViewStack.selectedIndex = 0;
				}
			}
			
			private function getMessageDetails():void{
				var result:Object = dataGrid.selectedItem;
				if(result != null)
					_message = new MessageVO(result);
			}

			private function onMessageDeleteResult(result:Object):void{
				if(result && result is Array){
					for(var i:Number = dataGrid.dataProvider.length - 1; i >= 0; i--){
						var data:Object = dataGrid.dataProvider[i];
						if(result.indexOf(data.messageId) != -1)
							dataGrid.dataProvider.removeItemAt(i);
					}
				}
			}
			
			private function getReporter():void{
				var data:Object = dataGrid.selectedItem;
				if(data != null){
					_reporter = _cachedUsers[data.userId];
					if(_reporter == null)
						AMFService.send('CAM.person', [data.userId], onReporterResult, onFault);
				}
			}
			
			private function onReporterResult(result:Object):void{
				_reporter = new PersonVO(result);
				_cachedUsers[_reporter.userId] = _reporter; 
			}
			
			private function onItemClick(event:ListEvent):void{
				if(event.columnIndex != 0) {//Checkbox
					if(dataGrid.selectedItem.status == MessageStatusEnum.Unread.value){
						AMFService.send('Admin.read', [dataGrid.selectedItem.messageId]);
						dataGrid.selectedItem.status = MessageStatusEnum.Read.value;
						dataGrid.dataProvider.dispatchEvent(new CollectionEvent(CollectionEvent.COLLECTION_CHANGE));
					}
					createViewStack.selectedIndex = 0;
					tabNav.selectedChild.dispatchEvent(new FlexEvent(FlexEvent.SHOW));
				}
			}
			
			private function onNoticeResult(result:Object):void{
				dataGrid.dataProvider = result;
			}
			
			private function onFault(fault:Object):void{
				Manager.error(fault.code + ": " + fault.description, Manager.bundle.getMessage('error_notice'));
			}
		]]>
	</mx:Script>
	
	<!--Disable Delete and New buttons-->
	<mx:Binding source="dataGrid.selectedIndex" destination="model.selectedIndex"/>
	
	<mx:DataGrid id="dataGrid" width="300" height="100%" itemClick="onItemClick(event)">
		<mx:columns>
			<mx:Array>
				<mx:DataGridColumn dataField="flag" headerText="" resizable="false"
						itemRenderer="com.academy.calder.component.renderer.CheckCellRenderer" width="15"/>
				<mx:DataGridColumn dataField="subject" headerText="Subject" 
						itemRenderer="com.academy.calder.component.renderer.MessageCellRenderer"/>
				<mx:DataGridColumn dataField="createdTime" headerText="Date" width="80" 
						itemRenderer="com.academy.calder.component.renderer.MessageCellRenderer"/>
			</mx:Array>
		 </mx:columns>
	</mx:DataGrid>
	<mx:ViewStack id="createViewStack" width="100%" height="100%">
		<mx:TabNavigator id="tabNav" borderStyle="solid"
			  paddingTop="5"
			  paddingBottom="5"
			  paddingLeft="5"
			  paddingRight="5"
			  height="100%"
			  width="100%">
			
			<mx:VBox width="100%" height="100%" label="Message Body" show="getMessageDetails()">
				<mx:HBox width="100%">
					<mx:Label text="Subject:" fontWeight="bold"/>
					<mx:Label text="{_message.subject}" width="100%"/>
				</mx:HBox>
				<mx:HBox width="100%">
					<mx:Label text="Date:" fontWeight="bold"/>
					<mx:Label text="{_message.createdTime}" width="100%"/>
				</mx:HBox>
				<mx:Text text="{_message.body}" width="100%" height="100%"/>
			</mx:VBox>
			<mx:Form width="100%" height="100%" label="Reporter Profile" show="getReporter()">
				<mx:FormItem label="First Name:">
					<mx:Label text="{_reporter.first}"/>
				</mx:FormItem>
				<mx:FormItem label="Last Name:">
					<mx:Label text="{_reporter.last}"/>
				</mx:FormItem>
				<mx:FormItem label="Sex:">
					<mx:Label text="{_reporter.sex}"/>
				</mx:FormItem>
				<mx:FormItem label="Date Of Birth:">
					<mx:Label text="{_reporter.dateOfBirth}"/>
				</mx:FormItem>
				<mx:FormItem label="Notes:" width="100%" height="100%">
					<mx:Text text="{_reporter.notes}" width="100%" height="100%"/>
				</mx:FormItem>
			</mx:Form>
		</mx:TabNavigator>
		<links:MessageView id="messageView" submit="onSubmit()" cancel="onCancel()"/>
	</mx:ViewStack> 
</mx:HDividedBox>