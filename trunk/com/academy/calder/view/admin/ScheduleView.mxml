<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" width="1125" height="676" layout="horizontal"
	horizontalScrollPolicy="off" verticalScrollPolicy="off" showCloseButton="true" close="closeWindow()"
	paddingBottom="2" paddingTop="2" paddingLeft="2" paddingRight="2" preinitialize="init()" styleName="schedulePanel">
	<mx:Style>
		.schedulePanel {
		   borderColor: #000099;
		   borderAlpha: 1;
		   titleStyleName: "schedulePanelTitle";
		}
		
		.schedulePanelTitle {
		   color: #ffffff;
		   fontWeight:bold;
		}
		
        .scheduleBorder{
            borderColor:#999999;
            borderStyle:solid;
        }
        
        .scheduleBoxHeader{
        	horizontalAlign:right;
        	paddingRight:2;
        	fontWeight:bold;
        	backgroundColor:#FF6699;
        	borderColor:#999999;
            borderStyle:solid;
            borderSides:bottom;
        }
    </mx:Style>
	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.events.DragEvent;
			import mx.events.CloseEvent;
			import mx.managers.DragManager;
			import mx.managers.PopUpManager;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.collections.ArrayCollection;
			import com.academy.calder.business.Manager;
			import com.academy.calder.business.AMFService;
			
			import flash.utils.getDefinitionByName;
			
			[Bindable]
			private var calendarData:ArrayCollection;
			
			private var scheduleData:Object  = {};
			private var recurringData:Object = {};
			private var exceptionData:Object = {};
			private var scheduleRefData:Object = {};
			
			private var resultData:Object;
			private var lastCreateDate:Date;
			private var createDateInterval:Number;
			private var dateGrid:*;
			
			private static var _window:ScheduleView;
			
			private static const _smtwtfs:Array = [0, 0, 0, 0, 0, 0, 0]; 
			
			public static function openWindow(result:Object):ScheduleView{
				if(_window == null)
               		_window = PopUpManager.createPopUp(Manager.application as DisplayObject, ScheduleView, true) as ScheduleView;
    			_window.resultData = result;
    			PopUpManager.centerPopUp(_window);
			    return _window;
			}
			
			public static function closeWindow():void{
				if(_window)
					PopUpManager.removePopUp(_window);
				_window = null;
			}
			
			private function init():void{
				var calendarLayout:Class = getDefinitionByName("mx.controls::CalendarLayout") as Class;
				dateGrid = new calendarLayout();
			}
			
			private function set displayedMonthAndYear(value:int):void{
				var day:Number = NaN;
				var startDate:Date, endDate:Date;
				var displayedYear:int = dateChooser.displayedYear;				
				var displayedMonth:int = dateChooser.displayedMonth;
				var monthName:String = dateChooser.monthNames[displayedMonth];
				var offset:int = dateGrid.mx_internal::getOffsetOfMonth(displayedYear, displayedMonth);
        		var daysInMonth:int = dateGrid.mx_internal::getNumberOfDaysInMonth(displayedYear, displayedMonth);
        		var date:Date = new Date(displayedYear, displayedMonth);
				calendarData = null;
				
				if(details) details.dataProvider = null;
				if(cancel_lst) cancel_lst.dataProvider = null;
					
				if(lastCreateDate == null || lastCreateDate.time != date.time){	
					function createGrid():void{
						clearInterval(createDateInterval);						
						scheduleData = {};
						recurringData = {};
						exceptionData = {};
						scheduleRefData = {};
						
						if(resultData is Array){
							for(var i:uint = 0; i < resultData.length; i++){
								var record:Object = resultData[i];
								var ymd:Array = record.startDate.split('-');
								startDate = new Date(ymd[0], ymd[1] - 1);
								if(startDate.time > date.time)
									continue;
								scheduleRefData[record.scheduleId] = record;
								if(record.endDate == null || record.startDate != record.endDate){
									for(var w:uint = 0; w < record.smtwtfs.length; w++){
										if(record.smtwtfs.charAt(w) == "1"){
											if(recurringData[w] == null)
												recurringData[w] = [];
											recurringData[w].push(record);
										}
									}
								}else{
									if(ymd[0] == displayedYear && ymd[1] == displayedMonth + 1){
										var d:uint = ymd[2];
										if(exceptionData[d] == null)
											exceptionData[d] = [];
										exceptionData[d].push(record);
									}	
								}
							}
						}
						
						var rows:ArrayCollection = new ArrayCollection();
						for(var r:uint = 0; r < 6; r++){
							var cols:ArrayCollection = new ArrayCollection();
							for(var c:uint = 0; c < 7; c++){
								if(isNaN(day)){
									if(c == offset)
										day = 1;
								}else{
									day++;
								}
								
								if(!isNaN(day)){
									var $exceptions:Array = exceptionData[day];
									var $recurrings:Array = recurringData[c];
									if($recurrings != null && $exceptions == null){
										var recursives:Array = [];
										for(var v:uint = 0; v < $recurrings.length; v++){
											var recur:Object = $recurrings[v];
											ymd = recur.startDate.split('-');
											startDate = new Date(ymd[0], ymd[1] - 1, ymd[2]);
											if(startDate.time <= date.time + ((day - 1) * 86400000)){
												if(recur.endDate != null){
													ymd = recur.endDate.split('-');
													endDate = new Date(ymd[0], ymd[1] - 1, ymd[2]);
													if(date.time + ((day - 1) * 86400000) > endDate.time)
														continue;
												}
												recursives.push(recur);
											}
										}
										scheduleData[day] = recursives;
									}else if($exceptions != null){
										var $data:Array = [];
										
										if($recurrings != null){
											for(var i1:uint = 0; i1 < $recurrings.length; i1++){
												var $r:Object = $recurrings[i1];
												var add:Boolean = true;
												for(var i2:uint = 0; i2 < $exceptions.length; i2++){
													var $e:Object = $exceptions[i2];
													if($r.startTime == $e.startTime && $e.disposition == "canceled"){
														add = false;
														break;
													}
												}
												if(add == true)
													$data.push($r);
											}
										}
										
										for(var i3:uint = 0; i3 < $exceptions.length; i3++){
											$e = $exceptions[i3];
											if($e.disposition != "canceled")
												$data.push($e);
										}
										var listData:ArrayCollection = new ArrayCollection($data);
										doSort(listData);
										scheduleData[day] = listData.toArray();
									}
								}
								cols.addItem(day);
								if(day >= daysInMonth){
									r = 6;
									break;
								}
							}
							rows.addItem(cols);
						}
						calendarData = rows;
					};				
					title = monthName + dateChooser.monthSymbol + " - " + displayedYear + dateChooser.yearSymbol;
					lastCreateDate = date;
					
					clearInterval(createDateInterval);
					createDateInterval = setInterval(createGrid, 300);
				}
			}
			
			private function doSort(listData:ArrayCollection):void{
				var sort:Sort = new Sort();
                sort.fields = [new SortField("startTime")]; 
                listData.sort = sort;
                listData.refresh();
			}
			
			//Repeater functions
			private function $v(item:Object, prop:String):*{
				if(prop == "refScheduleId")
					return (item.refScheduleId == null ? null : scheduleRefData[item.refScheduleId]);
				return item[prop];
			}
			
			public function selectDate(startDate:String):void{
				lastCreateDate = null;
				
				var d:Array = startDate.split('-');
				dateChooser.selectedDate = new Date(d[0], d[1] - 1, d[2]);
				if( dateChooser.displayedYear == dateChooser.selectedDate.fullYear &&
					dateChooser.displayedMonth == dateChooser.selectedDate.month){
					dateChooser.dispatchEvent(new Event(Event.CHANGE));
				}else{
					dateChooser.displayedMonth = dateChooser.selectedDate.month;
					dateChooser.displayedYear = dateChooser.selectedDate.fullYear;
				}
			}
			
			private function onDragEnter(event:DragEvent):void{
				var items:Array = event.dragSource.dataForFormat("items") as Array;
				if(!items || items.length != 1 || uint(items[0].canReschedule) != 1)
					event.preventDefault();
			}
			
			private function onDragComplete(event:DragEvent):void{
				var items:Array = event.dragSource.dataForFormat("items") as Array;
				if(event.relatedObject != null && items && items.length == 1){
					var item:Object = items[0];
					var date:Date = new Date(dateChooser.displayedYear, dateChooser.displayedMonth, List(event.relatedObject).data);
					var smtwtfs:Array = _smtwtfs.concat(); //clone
					smtwtfs[date.day] = 1;
						
					function rollback(fault:Object=null):void{
						var index:int = ArrayCollection(List(event.relatedObject).dataProvider).getItemIndex(item);
						if(index != -1){
							ArrayCollection(List(event.relatedObject).dataProvider).removeItemAt(index);
							ArrayCollection(event.target.dataProvider).addItem(item);
							doSort(event.target.dataProvider as ArrayCollection);
						}
					};
					
					function commit(result:Object):void{
						item.startDate = dateFormat.format(date);
						item.endDate = dateFormat.format(date);
						item.smtwtfs = smtwtfs.join("");
					};
					
					function alertClickHandler(closeEvent:CloseEvent):void{
						var type:uint;
						if(item.refScheduleId != null)
							type = 1;
						else if(item.startDate == item.endDate)
							type = 2;
						else
							type = 3;
								
						var params:Array = [
							type,
							item.scheduleId,
							item.refScheduleId,
							item.startTime,
							dateFormat.format(date),
							dateFormat.format(date),
							smtwtfs.join(""),
							item.disposition,
							item.notes
						];
						if(closeEvent.detail == Alert.YES){
							AMFService.send('Account.current', params, commit, rollback);
						}else if(closeEvent.detail == Alert.OK){
							AMFService.send('Account.future', params, commit, rollback);
						}else if(closeEvent.detail == Alert.NO || closeEvent.detail == Alert.CANCEL){
							rollback();
						}
					};
					
					Alert.buttonWidth = 120;
					if(item.refScheduleId == null && item.endDate == null){
						var labels:Array = [Alert.yesLabel, Alert.okLabel];
		                Alert.yesLabel = Manager.bundle.getMessage("current");
		                Alert.okLabel  = Manager.bundle.getMessage("future");
		                Alert.show(
		                	Manager.bundle.getMessage("Apply the changes to the current event only or to this and all future occurrences?"),
		                	Manager.bundle.getMessage("Repeating Event"), Alert.YES|Alert.OK|Alert.CANCEL, this, alertClickHandler);
		                
		                // Set the labels back to normal:
		                Alert.yesLabel = labels[0];
		                Alert.okLabel = labels[1];  
     				}else{
     					Alert.show(
		                	Manager.bundle.getMessage("Do you want to reschedule the current lesson?"),
		                	Manager.bundle.getMessage("Reschedule Event"), Alert.YES|Alert.NO, this, alertClickHandler);
		                
     				}
				}
			}

			private function onFault(fault:Object):void{
				Manager.error(fault.code + ": " + fault.description, Manager.bundle.getMessage('error_schedule'));
			}
		]]>
	</mx:Script>
	<mx:Binding source="dateChooser.displayedMonth" destination="displayedMonthAndYear"/>
	<mx:Binding source="dateChooser.displayedYear" destination="displayedMonthAndYear"/>
	<mx:DateFormatter id="dateFormat" formatString="YYYY-MM-DD"/>
	
	<mx:Canvas width="100%" id="canvas">
		<mx:VBox width="{canvas.width}" height="{canvas.height}" verticalAlign="middle" horizontalAlign="center">
			<mx:Label text="{Manager.bundle.getMessage('pleaseWait')}" fontWeight="bold"/>
		</mx:VBox>
		
		<mx:Grid width="100%" borderSides="left top right" styleName="scheduleBorder" verticalGap="1" horizontalGap="1" backgroundColor="#F2F2F2">
			<mx:GridRow width="100%" borderSides="bottom" styleName="scheduleBorder">
				<mx:Repeater id="days" dataProvider="{dateChooser.dayNames}">
					<mx:GridItem width="14.26%" borderSides="right" styleName="scheduleBorder" backgroundColor="#FCA34C">
						<mx:Label width="100%" textAlign="center" fontWeight="bold" color="white" text="{Manager.bundle.getMessage('d' + days.currentIndex)}"/>
					</mx:GridItem>
				</mx:Repeater>
			</mx:GridRow>
			<mx:Repeater id="rows" dataProvider="{calendarData}">
				<mx:GridRow width="100%" borderSides="bottom" styleName="scheduleBorder">
					<mx:Repeater id="cols" dataProvider="{rows.currentItem}">
						<mx:GridItem width="14.26%" borderSides="right" styleName="{cols.currentIndex == 6 ? null : 'scheduleBorder'}">
							<mx:VBox width="100%" height="100" verticalGap="0" visible="{!isNaN(cols.currentItem)}" backgroundColor="#ffffff">
								<mx:Script>
									<![CDATA[
										import mx.containers.VBox;
										
										private function onComplete(event:Event):void{
											var selectionColor:Number = dateChooser.getStyle('selectionColor');
											var vbox:VBox = event.currentTarget.parent as VBox;	
											if(vbox == null)
												return;
											event.target.dataProvider = scheduleData[event.target.data];

											function selectedDateChanged(e:Event):void{
												vbox.setStyle("backgroundColor", 
													event.currentTarget.data == dateChooser.selectedDate.date ? selectionColor : 0xffffff);
												
												if(event.currentTarget.data == dateChooser.selectedDate.date){
													cancel_lst.dataProvider = [];
													details.dataProvider = event.currentTarget.dataProvider;
													
													var $exceptions:Array = exceptionData[event.currentTarget.data];
													if($exceptions != null){
														for(var i:uint = 0; i < $exceptions.length; i++){
															var $e1:Object = $exceptions[i];
															if($e1.disposition == "canceled"){
																for each(var $e2:Object in scheduleRefData){
																	if($e2.refScheduleId == $e1.scheduleId){
																		cancel_lst.dataProvider.addItem(
																			{label:$e1.startTime + " -> " + $e2.startDate + " " + $e2.startTime, startDate:$e2.startDate});
																		break;
																	}
																}
															}
														}
													}
												}
											};
											dateChooser.addEventListener(Event.CHANGE, selectedDateChanged);
											if(dateChooser.selectedDate != null)
												dateChooser.dispatchEvent(new Event(Event.CHANGE));
										}
										
										private function onClick(event:Event):void{
											dateChooser.selectedDate = 
												new Date(dateChooser.displayedYear, dateChooser.displayedMonth, event.currentTarget.data);
											dateChooser.dispatchEvent(new Event(Event.CHANGE));
										}
										
										private function labelFunctionHandler(item:Object):String{
											return item.startTime + " " + (item.disposition != "lesson taken" ? item.disposition : "");
										}
									]]>
								</mx:Script>
								<mx:HBox width="100%" styleName="scheduleBoxHeader">
									<mx:Label text="{isNaN(cols.currentItem) ? null : cols.currentItem}"/>						
								</mx:HBox>
								<mx:List width="100%" height="100%" creationComplete="onComplete(event)"
										tabIndex="{cols.currentIndex}" data="{cols.currentItem}" 
										click="onClick(event)" labelFunction="labelFunctionHandler"
										itemRenderer="mx.controls.Label" backgroundAlpha="0" borderStyle="none" 
										rollOverColor="#ffffffff" selectionColor="#ffffffff" dragComplete="onDragComplete(event)"
										dropEnabled="true" dragMoveEnabled="true" dragEnabled="true" dragEnter="onDragEnter(event)"/>
							</mx:VBox>
						</mx:GridItem>
					</mx:Repeater>
				</mx:GridRow>
			</mx:Repeater>
		</mx:Grid>
	</mx:Canvas>
	<mx:VBox height="100%" horizontalAlign="right">
		<mx:DateChooser id="dateChooser" scroll="dateChooser.selectedDate=null"/>
		<mx:Canvas id="cvs" width="{dateChooser.width}" height="100%" horizontalScrollPolicy="off" borderStyle="solid">
			<mx:Form width="100%" height="100%" verticalGap="0" paddingLeft="0" paddingRight="0">
				<mx:Repeater id="details">
					<mx:FormItem label="{Manager.bundle.getMessage('startTime')}:" fontWeight="bold">
						<mx:Label text="{$v(details.currentItem, 'startTime')}" width="85"/>
					</mx:FormItem>
					<mx:FormItem toolTip="{$v($v(details.currentItem, 'refScheduleId'), 'disposition')}" 
							textDecoration="underline" color="blue" useHandCursor="true" buttonMode="true" mouseChildren="false"
							visible="{$v(details.currentItem, 'refScheduleId') != null}" includeInLayout="{$v(details.currentItem, 'refScheduleId') != null}"
							label="{$v($v(details.currentItem, 'refScheduleId'), 'startDate')}" click="selectDate(event.target.label)">
						<mx:Label text="{$v($v(details.currentItem, 'refScheduleId'), 'startTime')}" width="85"/>
					</mx:FormItem>
					<mx:FormItem label="{Manager.bundle.getMessage('disposition')}:">
						<mx:Label  text="{$v(details.currentItem, 'disposition')}" 
								toolTip="{$v(details.currentItem, 'disposition')}" width="85"/>
					</mx:FormItem>
					<mx:FormItem label="{Manager.bundle.getMessage('startDate')}:">
						<mx:Label text="{$v(details.currentItem, 'startDate')}" width="85" useHandCursor="true" buttonMode="true" mouseChildren="false"
							click="selectDate(event.target.text)" color="blue" textDecoration="underline"/>
					</mx:FormItem>
					<mx:FormItem label="{Manager.bundle.getMessage('endDate')}:">
						<mx:Label text="{$v(details.currentItem, 'endDate')}" width="85" useHandCursor="true" buttonMode="true" mouseChildren="false"
							click="selectDate(event.target.text)" color="blue" textDecoration="underline"/>
					</mx:FormItem>
					<mx:FormItem label="{Manager.bundle.getMessage('note')}:">
						<mx:Text text="{$v(details.currentItem, 'notes')}" width="85"/>
						<mx:Spacer height="25"/>
					</mx:FormItem>
				</mx:Repeater>
			</mx:Form>
		</mx:Canvas>
		<mx:List id="cancel_lst" width="{dateChooser.width}" color="red" textDecoration="underline" height="30">
			<mx:itemRenderer>
				<mx:Component>
					<mx:Label useHandCursor="true" buttonMode="true" mouseChildren="false" 
						click="ScheduleView(document).selectDate(data.startDate)"/>
				</mx:Component>
			</mx:itemRenderer>
		</mx:List>
		<mx:Button label="{Manager.bundle.getMessage('close')}" click="closeWindow()"/>
	</mx:VBox>
</mx:TitleWindow>