<?xml version="1.0" encoding="utf-8"?>
<mx:HDividedBox xmlns:mx="http://www.adobe.com/2006/mxml"
				xmlns:home="com.academy.calder.view.admin.home.*"
				xmlns:buttons="com.academy.calder.component.buttons.*"
				xmlns:links="com.academy.calder.view.admin.links.*" styleName="innerView"
				width="100%" height="100%" horizontalGap="6" activate="onRefresh()" creationComplete="onComplete()">
	<mx:Script>
		<![CDATA[
			import mx.events.ListEvent;
			import mx.events.CollectionEvent;
			import com.academy.calder.vo.UserVO;
			import com.academy.calder.vo.PersonVO;
			import com.academy.calder.enum.Gender;
			import com.academy.calder.enum.PrivilegeEnum;
			import com.academy.calder.business.Manager;
			import com.academy.calder.business.AMFService;
			import com.academy.calder.enum.AccountStatus;
			import com.academy.calder.enum.MessageStatusEnum;
			
			private static const FIELD_WIDTH:uint = 200;

			[Bindable]
			private var _person:PersonVO;
			[Bindable]
			private var _user:UserVO;

			[Bindable]
			private var _newrecord:Boolean = false;
			[Bindable]
			private var _editrecord:Boolean = false;
			
			[Bindable]
			private var _personTypes:Array;
			
			[Bindable]
			private var _manager:Manager = Manager.instance;
			
			private function onComplete():void{
				_personTypes = [
					{label:Manager.bundle.getMessage('all'), data:'all'},
					{label:Manager.bundle.getMessage('student'), data:'student'},
					{label:Manager.bundle.getMessage('employee'), data:'employee'}
				];
			}
			
			private function onItemClick(event:ListEvent):void{
				if(dataGrid.selectedItem.cached == true){
					onPersonResult(dataGrid.selectedItem);
				}else{
					AMFService.send('CAM.person', [dataGrid.selectedItem.personId], onPersonResult, onFault);
				}
			}
			
			public function onRefresh():void{
				clean();
				var item:String = ((userType && userType.selectedItem) ? userType.selectedItem.data : "all");
				if(item == "student"){
					AMFService.send('Student.students', null, onPersonsResult, onFault);
				}else if(item == "employee"){
					AMFService.send('Employee.employees', null, onPersonsResult, onFault);
				}else{
					AMFService.send('CAM.persons', null, onPersonsResult, onFault);
				}
			}
			
			private function onSearch():void{
				clean();
				var item:String = ((userType && userType.selectedItem) ? userType.selectedItem.data : "all");
				if(item == "student"){
					AMFService.send('Student.searchStudents', [keyword.text], onPersonsResult, onFault);
				}else if(item == "employee"){
					AMFService.send('Employee.searchEmployees', [keyword.text], onPersonsResult, onFault);
				}else{
					AMFService.send('CAM.searchPersons', [keyword.text], onPersonsResult, onFault);
				}
			}
			
			private function onSubmit():void{
				if(username && username.text.length > 0){
					if(password.text.length < 6){
						Manager.error("Password cannot be less than 6 characters", Manager.bundle.getMessage('error_password'));
						return;
					}
					if(updatePwd.selected && password.text != confirm.text){
						Manager.error("Passwords do not match", Manager.bundle.getMessage('error_password'));
						return;
					}
				}
				
				if(username != null){
					_user.username = username.text;
					_user.password = password.text;
					_user.admin = admin.selected;
					_user.privileges = privileges.selectedItem as PrivilegeEnum;
					_user.status = status.selectedItem as AccountStatus;
					_user.notes = unotes.text;
					
					password.text = "";
					confirm.text = "";
				}
				
				AMFService.send('CAM.updateRecord', [_person.userId,
												   _person.personId,
												   first.text,
												   last.text,
												   dob.text,
												   lang.selectedItem.localeName,
												   sex.selectedItem.value,
												   pnotes.text,
												   _user.username,
												   _user.password,
												   _user.admin,
												   _user.privileges.value,
												   _user.status.value,
												   _user.notes,
												   (updatePwd ? updatePwd.selected : false)], onSubmitDataResult, onFault);
			}
			
			private function onEdit():void{
				_editrecord = true;
			}
			
			private function onNew():void{
				_person = new PersonVO()
				_user = new UserVO();
				_newrecord = true;
				Manager.findLocaleIndex(_person);
				if(dataGrid) dataGrid.selectedIndex = -1;
			}
			
			private function clean():void{
				_newrecord = false;
				_editrecord = false;
				_person = null;
				_user = null;
				Manager.findLocaleIndex(_person);
				if(dataGrid) dataGrid.selectedIndex = -1;
				if(tabNav) tabNav.selectedIndex = 0;
			}

			private function onPersonsResult(result:Object):void{
				dataGrid.dataProvider = result;
				tabNav.selectedIndex = 0;
			}
			
			private function onPersonResult(result:Object):void{
				_person = new PersonVO(result);
				result.cached = true;
				dataGrid.dataProvider.setItemAt(result, dataGrid.selectedIndex);
				tabNav.selectedIndex = 0;
				Manager.findLocaleIndex(_person);

				if(_person.userId == Manager.instance.currentUser.userId)
					Manager.instance.currentUser.personRef = _person;
		
				//update user data
				if(_person.userId != null && _person.userId.length){
					if(dataGrid.selectedItem.user is UserVO)
						_user = dataGrid.selectedItem.user;
					else
						AMFService.send('CAM.user', [_person.userId], onUserResult, onFault);
				}else{
					_user = new UserVO();
				}
			}
			
			private function onUserResult(result:Object):void{
				_user = new UserVO(result);
				dataGrid.selectedItem.user = _user;
			}

			private function onSubmitDataResult(result:Object):void{
				if(result != null){
					_person = new PersonVO(result);
					result.user = _user;
					result.cached = true;

					if(dataGrid.selectedIndex != -1){
						dataGrid.dataProvider.setItemAt(result, dataGrid.selectedIndex);
					}else{
						dataGrid.dataProvider.addItemAt(result, 0);
						dataGrid.selectedIndex = 0;
					}
					
					_newrecord = false;
					_editrecord = false;
					Manager.findLocaleIndex(_person);
					tabNav.selectedIndex = 0;
				}
			}
			
			private function onFault(fault:Object):void{
				Manager.error(fault.code + ": " + fault.description, Manager.bundle.getMessage('error_persons'));
			}
		]]>
	</mx:Script>

	<mx:VBox width="400" height="100%" enabled="{_newrecord == false &amp;&amp; _editrecord == false}">
		<mx:HBox width="100%" label="Search" backgroundColor="#cccccc"
				paddingTop="10" paddingLeft="10" paddingRight="10" paddingBottom="10">
			<mx:TextInput id="keyword" width="100%" enter="onSearch()"/>
			<mx:Button label="{Manager.bundle.getMessage('search')}" click="onSearch()"/>
		</mx:HBox>
		<mx:DataGrid id="dataGrid" width="100%" height="100%" itemClick="onItemClick(event)">
			<mx:columns>
				<mx:Array>
					<mx:DataGridColumn dataField="last" headerText="Last"/>
					<mx:DataGridColumn dataField="first" headerText="First"/>
				</mx:Array>
			 </mx:columns>
		</mx:DataGrid>
		<mx:HBox width="100%" paddingBottom="5" paddingLeft="5" paddingRight="5" verticalAlign="middle">
			<mx:Label text="{Manager.bundle.getMessage('filter')}:"/>
			<mx:ComboBox id="userType" width="150" dataProvider="{_personTypes}" change="onRefresh()"/>
			<mx:Spacer width="100%"/>
			<mx:Button label="{Manager.bundle.getMessage('refresh')}" click="onRefresh()"/>
		</mx:HBox>
	</mx:VBox>
	<mx:TabNavigator id="tabNav" width="100%" height="100%">
		<mx:VBox width="100%" height="100%" label="Person" id="personForm">
			<mx:Form width="100%" height="100%" enabled="{_editrecord || _newrecord}">
				<mx:FormItem label="{Manager.bundle.getMessage('first')}:">
					<mx:TextInput width="{FIELD_WIDTH}" text="{_person.first}" id="first"/>
				</mx:FormItem>
				<mx:FormItem label="{Manager.bundle.getMessage('last')}:">
					<mx:TextInput width="{FIELD_WIDTH}" text="{_person.last}" id="last"/>
				</mx:FormItem>
				<mx:FormItem label="{Manager.bundle.getMessage('dob')}:">
					<mx:DateField width="{FIELD_WIDTH}" text="{_person.dateOfBirth == null ? '' : _person.dateOfBirth}" id="dob" formatString="YYYY-MM-DD"/>
				</mx:FormItem>
				<mx:FormItem label="{Manager.bundle.getMessage('sex')}:">
					<mx:ComboBox dataProvider="{Gender.list}" width="{FIELD_WIDTH}" selectedItem="{_person.sex}" id="sex"/>
				</mx:FormItem>
				<mx:FormItem label="{Manager.bundle.getMessage('language')}:">
					<mx:ComboBox dataProvider="{_manager.languages}" width="{FIELD_WIDTH}" selectedIndex="{_manager.localeIndex}" labelField="language" id="lang"/>
				</mx:FormItem>
				<mx:FormItem label="{Manager.bundle.getMessage('notes')}:">
					<mx:TextArea text="{_person.notes}" id="pnotes" width="{FIELD_WIDTH}" height="80"/>
				</mx:FormItem>
			</mx:Form>
			<mx:HBox paddingLeft="60" paddingBottom="5">
				<buttons:CreateButton label="New..." click="onNew()" enabled="{_newrecord == false}"/>
				<buttons:ModifyButton label="{Manager.bundle.getMessage('edit')}" 
					enabled="{dataGrid.selectedIndex != -1 &amp;&amp; _newrecord == false &amp;&amp; _editrecord == false}" click="onEdit()"/>
				<buttons:ModifyButton label="{Manager.bundle.getMessage('submit')}" enabled="{_editrecord || _newrecord}" click="onSubmit()"/>
				<mx:Button label="Cancel" enabled="{_editrecord || _newrecord}" click="clean()" />
			</mx:HBox>
		</mx:VBox>
		<mx:VBox width="100%" height="100%" label="User Access">
			<mx:Form width="100%" height="100%" enabled="{_editrecord || _newrecord}">
				<mx:FormItem label="{Manager.bundle.getMessage('username')}:">
					<mx:TextInput width="{FIELD_WIDTH}" text="{_user.username}" id="username"/>
				</mx:FormItem>
				<mx:FormItem>
					<mx:CheckBox id="updatePwd" label="{Manager.bundle.getMessage('updatePwd')}"
						 selected="{_person.userId == null}" visible="{_person.userId != null &amp;&amp; Manager.instance.currentUser.privileges == PrivilegeEnum.CRUDO}"/>
				</mx:FormItem>
				<mx:FormItem label="{Manager.bundle.getMessage('password')}:" visible="{updatePwd.selected}" includeInLayout="{updatePwd.selected}">
					<mx:TextInput width="{FIELD_WIDTH}" displayAsPassword="true" text="{_user.password}" id="password"/>
				</mx:FormItem>
				<mx:FormItem label="{Manager.bundle.getMessage('confirm')}:" visible="{updatePwd.selected}" includeInLayout="{updatePwd.selected}">
					<mx:TextInput width="{FIELD_WIDTH}" displayAsPassword="true" text="{_user.password}" id="confirm"/>
				</mx:FormItem>
				<mx:FormItem>
					<mx:CheckBox width="{FIELD_WIDTH}" label="{Manager.bundle.getMessage('setAsAdmin')}" selected="{_user.admin}" id="admin"/>
				</mx:FormItem>
				<mx:FormItem label="{Manager.bundle.getMessage('privileges')}:">
					<mx:ComboBox dataProvider="{PrivilegeEnum.list}" width="{FIELD_WIDTH}" selectedItem="{_user.privileges}" id="privileges"/>
				</mx:FormItem>
				<mx:FormItem label="{Manager.bundle.getMessage('userStatus')}:">
					<mx:ComboBox dataProvider="{AccountStatus.list}" width="{FIELD_WIDTH}" enabled="{username.text.length > 0}"
						selectedItem="{username.text.length == 0 ? AccountStatus.Inactive : _user.status}"
						change="{_user.status = event.target.selectedItem as AccountStatus}" id="status"/>
				</mx:FormItem>
				<mx:FormItem label="{Manager.bundle.getMessage('notes')}:">
					<mx:TextArea text="{_user.notes}" id="unotes" width="{FIELD_WIDTH}" height="80"/>
				</mx:FormItem>
			</mx:Form>
			<mx:HBox paddingLeft="60" paddingBottom="5">	
				<buttons:ModifyButton label="{Manager.bundle.getMessage('submit')}" enabled="{_editrecord || _newrecord}" click="onSubmit()"/>
				<mx:Button label="Cancel" enabled="{_editrecord || _newrecord}" click="clean()"/>
			</mx:HBox>
		</mx:VBox>
	</mx:TabNavigator>
</mx:HDividedBox>